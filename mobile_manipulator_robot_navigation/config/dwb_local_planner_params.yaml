base_local_planner: nav_core_adapter::LocalPlannerAdapter
LocalPlannerAdapter:
  planner_name: dwb_local_planner::DWBLocalPlanner

DWBLocalPlanner:
  # Robot configuration
  max_vel_x:  1.0
  min_vel_x: -0.2

  max_vel_y: 0.0  # diff drive robot
  min_vel_y: 0.0  # diff drive robot

  max_speed_xy: 1.0    # max_trans_vel: 0.8  # choose slightly less than the base's capability
  min_speed_xy: -0.2    # min_trans_vel: 0.1  # this is the min trans velocity when there is negligible rotational velocity

  max_vel_theta: 1.8    # max_rot_vel: 1.0  # choose slightly less than the base's capability
                        # 최소 회전 속도의 실제 값, 지정된 값 보다 빨라지지 않음.
  min_speed_theta: -0.2 # min_rot_vel: 0.1 default: 0.4  # this is the min angular velocity when there is negligible translational velocity
                        # 최소 회전 속도의 실제 값, 지정된 값 보다 느려지지 않음.
  acc_lim_x: 1.8
  acc_lim_y: 0.0      # diff drive robot
  acc_lim_theta: 1.8
  decel_lim_x: -1.8
  decel_lim_y: 0.0
  decel_lim_theta: -1.8

  # Goal tolerance
  yaw_goal_tolerance: 0.1  # yaw_goal_tolerance > (sim_time * min_rot_vel) / 2 (from Navigation Tuning Guide)
  xy_goal_tolerance: 0.1   # xy_goal_tolerance  > (sim_time * min_vel_x)   / 2
  split_path: true

  # Forward simulation (trajectory generation)
  trajectory_generator_name: dwb_plugins::StandardTrajectoryGenerator # or dwb_plugins::LimitedAccelGenerator
  sim_time: 1.1
  vx_samples: 20
  vy_samples: 1       # diff drive robot, there is only one sample
  vtheta_samples: 20
  discretize_by_time: false
  angular_granularity: 0.15
  linear_granularity: 0.05

  # Goal checking
  goal_checker_name: dwb_plugins::SimpleGoalChecker
  # stateful: true

  # Critics (trajectory scoring)
  #default_critic_namespaces: [dwb_critics, mir_dwb_critics]
  critics: [RotateToGoal, GoalAlign, GoalDist, ObstacleFootprint, PathAlign, PathDist]
  RotateToGoal: # 로봇이 Goal 의 xy 위치에 도착하고 전진 을 정지하면
    scale: 50.0
    lookahead_time: -1.0
    # slowing_factor: 5.0
  GoalAlign:
    scale: 32.0
  GoalDist:
    scale : 32.0
  ObstacleFootprint:
    scale: 0.01             # default: 0.01  mir: 0.01  - weighting for how much the controller should avoid obstacles
    max_scaling_factor: 0.2 # default: 0.2   mir: 0.2   - how much to scale the robot's footprint when at speed.
    scaling_speed: 0.25     # default: 0.25  mir: 0.25  - absolute velocity at which to start scaling the robot's footprint
    sum_scores: false       # if true, return sum of scores of all trajectory points instead of only last one
  PathAlign:
    scale: 64.0
    forward_point_distance: 0.325 # default: 0.325 mir: 0.325 - how far along to place an additional scoring point
  PathDist:         # 글로벌 플래너에서 생성한 궤적을 얼마나 붙어서 움직이냐, 값이 높으면 로컬 플래너의 길을 따라가는 걸 무시함
    scale: 32.0            # default: 32.0  mir: 32.0   - weighting for how much it should stick to the global path plan
    class: 'dwb_critics::PathDist'
  # PathProgress:
  #   scale: 48.0            # default: 24.0  mir: 48.0   - weighting for how much it should attempt to reach its goal
  #   heading_scale: 0.1
  #   class: 'thirabot_dwb_critics::PathProgress'
  #   xy_local_goal_tolerance: 0.20
  #   angle_threshold: -0.078539816  # 45 degrees


  # Prune already passed poses from plan
  prune_plan: true
  prune_distance: 1.0   # Old poses farther away than prune_distance (in m) will be pruned.
                        # If the robot ever gets away further than this distance from the plan,
                        # the error "Resulting plan has 0 poses in it" will be thrown and
                        # replanning will be triggered.

  # Debugging
  publish_cost_grid_pc: true
  debug_trajectory_details: true
  publish_global_plan: true
  publish_input_params: true
  publish_local_plan: true
  publish_trajectories: true
  publish_transformed_plan: true
  marker_lifetime: 0.5